// Code generated by MockGen. DO NOT EDIT.
// Source: list_repo.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "PLANEXA_backend/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListRepository is a mock of ListRepository interface.
type MockListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockListRepositoryMockRecorder
}

// MockListRepositoryMockRecorder is the mock recorder for MockListRepository.
type MockListRepositoryMockRecorder struct {
	mock *MockListRepository
}

// NewMockListRepository creates a new mock instance.
func NewMockListRepository(ctrl *gomock.Controller) *MockListRepository {
	mock := &MockListRepository{ctrl: ctrl}
	mock.recorder = &MockListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListRepository) EXPECT() *MockListRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockListRepository) Create(list *models.List, IdB uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", list, IdB)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockListRepositoryMockRecorder) Create(list, IdB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockListRepository)(nil).Create), list, IdB)
}

// Delete mocks base method.
func (m *MockListRepository) Delete(IdL uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", IdL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockListRepositoryMockRecorder) Delete(IdL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockListRepository)(nil).Delete), IdL)
}

// GetBoard mocks base method.
func (m *MockListRepository) GetBoard(IdL uint) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoard", IdL)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard.
func (mr *MockListRepositoryMockRecorder) GetBoard(IdL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockListRepository)(nil).GetBoard), IdL)
}

// GetById mocks base method.
func (m *MockListRepository) GetById(IdL uint) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", IdL)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockListRepositoryMockRecorder) GetById(IdL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockListRepository)(nil).GetById), IdL)
}

// GetTasks mocks base method.
func (m *MockListRepository) GetTasks(IdL uint) (*[]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", IdL)
	ret0, _ := ret[0].(*[]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockListRepositoryMockRecorder) GetTasks(IdL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockListRepository)(nil).GetTasks), IdL)
}

// Update mocks base method.
func (m *MockListRepository) Update(list models.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", list)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockListRepositoryMockRecorder) Update(list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockListRepository)(nil).Update), list)
}
