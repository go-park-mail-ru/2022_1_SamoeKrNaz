// Code generated by MockGen. DO NOT EDIT.
// Source: comment_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	models "PLANEXA_backend/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentUseCase is a mock of CommentUseCase interface.
type MockCommentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUseCaseMockRecorder
}

// MockCommentUseCaseMockRecorder is the mock recorder for MockCommentUseCase.
type MockCommentUseCaseMockRecorder struct {
	mock *MockCommentUseCase
}

// NewMockCommentUseCase creates a new mock instance.
func NewMockCommentUseCase(ctrl *gomock.Controller) *MockCommentUseCase {
	mock := &MockCommentUseCase{ctrl: ctrl}
	mock.recorder = &MockCommentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUseCase) EXPECT() *MockCommentUseCaseMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentUseCase) CreateComment(comment *models.Comment, IdT, userId uint) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment, IdT, userId)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUseCaseMockRecorder) CreateComment(comment, IdT, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUseCase)(nil).CreateComment), comment, IdT, userId)
}

// DeleteComment mocks base method.
func (m *MockCommentUseCase) DeleteComment(IdCm, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", IdCm, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentUseCaseMockRecorder) DeleteComment(IdCm, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentUseCase)(nil).DeleteComment), IdCm, userId)
}

// GetComments mocks base method.
func (m *MockCommentUseCase) GetComments(userId, IdT uint) (*[]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", userId, IdT)
	ret0, _ := ret[0].(*[]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockCommentUseCaseMockRecorder) GetComments(userId, IdT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockCommentUseCase)(nil).GetComments), userId, IdT)
}

// GetSingleComment mocks base method.
func (m *MockCommentUseCase) GetSingleComment(userId, IdCm uint) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleComment", userId, IdCm)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleComment indicates an expected call of GetSingleComment.
func (mr *MockCommentUseCaseMockRecorder) GetSingleComment(userId, IdCm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleComment", reflect.TypeOf((*MockCommentUseCase)(nil).GetSingleComment), userId, IdCm)
}

// RefactorComment mocks base method.
func (m *MockCommentUseCase) RefactorComment(comment *models.Comment, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefactorComment", comment, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefactorComment indicates an expected call of RefactorComment.
func (mr *MockCommentUseCaseMockRecorder) RefactorComment(comment, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefactorComment", reflect.TypeOf((*MockCommentUseCase)(nil).RefactorComment), comment, userId)
}
