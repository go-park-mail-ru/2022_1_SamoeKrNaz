// Code generated by MockGen. DO NOT EDIT.
// Source: user_repo.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "PLANEXA_backend/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUserToBoard mocks base method.
func (m *MockUserRepository) AddUserToBoard(IdB, IdU uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToBoard", IdB, IdU)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToBoard indicates an expected call of AddUserToBoard.
func (mr *MockUserRepositoryMockRecorder) AddUserToBoard(IdB, IdU interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToBoard", reflect.TypeOf((*MockUserRepository)(nil).AddUserToBoard), IdB, IdU)
}

// Create mocks base method.
func (m *MockUserRepository) Create(user *models.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), user)
}

// GetUserById mocks base method.
func (m *MockUserRepository) GetUserById(IdU uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", IdU)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryMockRecorder) GetUserById(IdU interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepository)(nil).GetUserById), IdU)
}

// GetUserByLogin mocks base method.
func (m *MockUserRepository) GetUserByLogin(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserRepositoryMockRecorder) GetUserByLogin(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetUserByLogin), username)
}

// GetUsersLike mocks base method.
func (m *MockUserRepository) GetUsersLike(username string) (*[]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersLike", username)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLike indicates an expected call of GetUsersLike.
func (mr *MockUserRepositoryMockRecorder) GetUsersLike(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLike", reflect.TypeOf((*MockUserRepository)(nil).GetUsersLike), username)
}

// IsAbleToLogin mocks base method.
func (m *MockUserRepository) IsAbleToLogin(username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAbleToLogin", username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAbleToLogin indicates an expected call of IsAbleToLogin.
func (mr *MockUserRepositoryMockRecorder) IsAbleToLogin(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAbleToLogin", reflect.TypeOf((*MockUserRepository)(nil).IsAbleToLogin), username, password)
}

// IsExist mocks base method.
func (m *MockUserRepository) IsExist(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockUserRepositoryMockRecorder) IsExist(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockUserRepository)(nil).IsExist), username)
}

// SaveAvatar mocks base method.
func (m *MockUserRepository) SaveAvatar(user *models.User, header *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatar", user, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAvatar indicates an expected call of SaveAvatar.
func (mr *MockUserRepositoryMockRecorder) SaveAvatar(user, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatar", reflect.TypeOf((*MockUserRepository)(nil).SaveAvatar), user, header)
}

// Update mocks base method.
func (m *MockUserRepository) Update(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), user)
}
