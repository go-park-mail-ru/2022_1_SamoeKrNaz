name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Verify dependencies
        run: go mod verify

      - name: Download library
        run: sudo apt-get update; sudo apt-get install libwebp-dev;

      - name: Github secrets
        run: echo postgresUser:\'${{ secrets.POSTGRES_USER }}\' >> cmd/api/config.yml; echo postgresPassword:\'${{ secrets.POSTGRES_PASSWORD }}\' >> cmd/api/config.yml; echo postgresDbName:\'${{ secrets.POSTGRES_DB_NAME }}\' >> cmd/api/config.yml; echo postgresUser:\'${{ secrets.POSTGRES_USER }}\' >> user_microservice/server_user_ms/config.yml; echo postgresPassword:\'${{ secrets.POSTGRES_PASSWORD }}\' >> user_microservice/server_user_ms/config.yml; echo postgresDbName:\'${{ secrets.POSTGRES_DB_NAME }}\' >> user_microservice/server_user_ms/config.yml; touch .env; echo POSTGRES_DB=${{ secrets.POSTGRES_DB_NAME }} >> .env; echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env; echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env;

      - name: Run go vet
        run: go vet ./...

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.45.2

      - name: Run golangci-lint
        run: golangci-lint run

      - name: Run tests
        run: go test -race -coverpkg=./... -coverprofile cover.out.tmp ./...; cat cover.out.tmp | grep -v ".pb.go" > cover.out ; go tool cover -func cover.out

      - name: Upload files
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download files
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: .

      - name: Send files to tachka
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "./*"
          target: "/home/ubuntu/planexa/backend/"

      - name: Docker-compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: cd /home/ubuntu/planexa/backend/;sudo docker stop $(docker ps -aq);sudo docker-compose up -d;
