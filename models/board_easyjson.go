// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson202377feDecodePLANEXABackendModels(in *jlexer.Lexer, out *Boards) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Boards, 0, 0)
			} else {
				*out = Boards{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Board
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels(out *jwriter.Writer, in Boards) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Boards) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson202377feEncodePLANEXABackendModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Boards) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson202377feEncodePLANEXABackendModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Boards) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson202377feDecodePLANEXABackendModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Boards) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson202377feDecodePLANEXABackendModels(l, v)
}
func easyjson202377feDecodePLANEXABackendModels1(in *jlexer.Lexer, out *Board) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idb":
			out.IdB = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "img_desk":
			out.ImgDesk = string(in.String())
		case "date":
			out.DateCreated = string(in.String())
		case "idu":
			out.IdU = uint(in.Uint())
		case "link":
			out.Link = string(in.String())
		case "Users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 0)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v4 User
					easyjson202377feDecodePLANEXABackendModels2(in, &v4)
					out.Users = append(out.Users, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Lists":
			if in.IsNull() {
				in.Skip()
				out.Lists = nil
			} else {
				in.Delim('[')
				if out.Lists == nil {
					if !in.IsDelim(']') {
						out.Lists = make([]List, 0, 1)
					} else {
						out.Lists = []List{}
					}
				} else {
					out.Lists = (out.Lists)[:0]
				}
				for !in.IsDelim(']') {
					var v5 List
					easyjson202377feDecodePLANEXABackendModels3(in, &v5)
					out.Lists = append(out.Lists, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]Task, 0, 0)
					} else {
						out.Tasks = []Task{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Task
					easyjson202377feDecodePLANEXABackendModels4(in, &v6)
					out.Tasks = append(out.Tasks, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels1(out *jwriter.Writer, in Board) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idb\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdB))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"img_desk\":"
		out.RawString(prefix)
		out.String(string(in.ImgDesk))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.DateCreated))
	}
	{
		const prefix string = ",\"idu\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdU))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Users {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels2(out, v8)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Lists\":"
		out.RawString(prefix)
		if in.Lists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Lists {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels3(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Tasks\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Tasks {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels4(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Board) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson202377feEncodePLANEXABackendModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Board) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson202377feEncodePLANEXABackendModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Board) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson202377feDecodePLANEXABackendModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Board) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson202377feDecodePLANEXABackendModels1(l, v)
}
func easyjson202377feDecodePLANEXABackendModels4(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idt":
			out.IdT = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "position":
			out.Position = uint(in.Uint())
		case "dateCreated":
			out.DateCreated = string(in.String())
		case "IdL":
			out.IdL = uint(in.Uint())
		case "IdB":
			out.IdB = uint(in.Uint())
		case "DateToOrder":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateToOrder).UnmarshalJSON(data))
			}
		case "deadline":
			out.Deadline = string(in.String())
		case "IdU":
			out.IdU = uint(in.Uint())
		case "is_ready":
			out.IsReady = bool(in.Bool())
		case "is_important":
			out.IsImportant = bool(in.Bool())
		case "link":
			out.Link = string(in.String())
		case "checkList":
			if in.IsNull() {
				in.Skip()
				out.CheckLists = nil
			} else {
				in.Delim('[')
				if out.CheckLists == nil {
					if !in.IsDelim(']') {
						out.CheckLists = make([]CheckList, 0, 1)
					} else {
						out.CheckLists = []CheckList{}
					}
				} else {
					out.CheckLists = (out.CheckLists)[:0]
				}
				for !in.IsDelim(']') {
					var v13 CheckList
					easyjson202377feDecodePLANEXABackendModels5(in, &v13)
					out.CheckLists = append(out.CheckLists, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "comment":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]Comment, 0, 0)
					} else {
						out.Comments = []Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v14 Comment
					easyjson202377feDecodePLANEXABackendModels6(in, &v14)
					out.Comments = append(out.Comments, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "append_users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 0)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v15 User
					easyjson202377feDecodePLANEXABackendModels2(in, &v15)
					out.Users = append(out.Users, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 1)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Attachment
					easyjson202377feDecodePLANEXABackendModels7(in, &v16)
					out.Attachments = append(out.Attachments, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels4(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idt\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdT))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Uint(uint(in.Position))
	}
	{
		const prefix string = ",\"dateCreated\":"
		out.RawString(prefix)
		out.String(string(in.DateCreated))
	}
	{
		const prefix string = ",\"IdL\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdL))
	}
	{
		const prefix string = ",\"IdB\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdB))
	}
	{
		const prefix string = ",\"DateToOrder\":"
		out.RawString(prefix)
		out.Raw((in.DateToOrder).MarshalJSON())
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		out.String(string(in.Deadline))
	}
	{
		const prefix string = ",\"IdU\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdU))
	}
	{
		const prefix string = ",\"is_ready\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReady))
	}
	{
		const prefix string = ",\"is_important\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsImportant))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"checkList\":"
		out.RawString(prefix)
		if in.CheckLists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.CheckLists {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels5(out, v18)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Comments {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels6(out, v20)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"append_users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Users {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels2(out, v22)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Attachments {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels7(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson202377feDecodePLANEXABackendModels7(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id_a":
			out.IdA = uint(in.Uint())
		case "default_name":
			out.DefaultName = string(in.String())
		case "system_name":
			out.SystemName = string(in.String())
		case "id_t":
			out.IdT = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels7(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id_a\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdA))
	}
	{
		const prefix string = ",\"default_name\":"
		out.RawString(prefix)
		out.String(string(in.DefaultName))
	}
	{
		const prefix string = ",\"system_name\":"
		out.RawString(prefix)
		out.String(string(in.SystemName))
	}
	{
		const prefix string = ",\"id_t\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdT))
	}
	out.RawByte('}')
}
func easyjson202377feDecodePLANEXABackendModels6(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idcm":
			out.IdCm = uint(in.Uint())
		case "title":
			out.Text = string(in.String())
		case "date":
			out.DateCreated = string(in.String())
		case "idt":
			out.IdT = uint(in.Uint())
		case "idu":
			out.IdU = uint(in.Uint())
		case "user":
			easyjson202377feDecodePLANEXABackendModels2(in, &out.User)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels6(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idcm\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdCm))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.DateCreated))
	}
	{
		const prefix string = ",\"idt\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdT))
	}
	{
		const prefix string = ",\"idu\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdU))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson202377feEncodePLANEXABackendModels2(out, in.User)
	}
	out.RawByte('}')
}
func easyjson202377feDecodePLANEXABackendModels5(in *jlexer.Lexer, out *CheckList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id_cl":
			out.IdCl = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "id_t":
			out.IdT = uint(in.Uint())
		case "CheckListItems":
			if in.IsNull() {
				in.Skip()
				out.CheckListItems = nil
			} else {
				in.Delim('[')
				if out.CheckListItems == nil {
					if !in.IsDelim(']') {
						out.CheckListItems = make([]CheckListItem, 0, 1)
					} else {
						out.CheckListItems = []CheckListItem{}
					}
				} else {
					out.CheckListItems = (out.CheckListItems)[:0]
				}
				for !in.IsDelim(']') {
					var v25 CheckListItem
					easyjson202377feDecodePLANEXABackendModels8(in, &v25)
					out.CheckListItems = append(out.CheckListItems, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels5(out *jwriter.Writer, in CheckList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id_cl\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdCl))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"id_t\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdT))
	}
	{
		const prefix string = ",\"CheckListItems\":"
		out.RawString(prefix)
		if in.CheckListItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.CheckListItems {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels8(out, v27)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson202377feDecodePLANEXABackendModels8(in *jlexer.Lexer, out *CheckListItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id_clit":
			out.IdClIt = uint(in.Uint())
		case "title":
			out.Description = string(in.String())
		case "id_cl":
			out.IdCl = uint(in.Uint())
		case "id_t":
			out.IdT = uint(in.Uint())
		case "isready":
			out.IsReady = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels8(out *jwriter.Writer, in CheckListItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id_clit\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdClIt))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"id_cl\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdCl))
	}
	{
		const prefix string = ",\"id_t\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdT))
	}
	{
		const prefix string = ",\"isready\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReady))
	}
	out.RawByte('}')
}
func easyjson202377feDecodePLANEXABackendModels3(in *jlexer.Lexer, out *List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idl":
			out.IdL = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "position":
			out.Position = uint(in.Uint())
		case "idb":
			out.IdB = uint(in.Uint())
		case "Tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]Task, 0, 0)
					} else {
						out.Tasks = []Task{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v28 Task
					easyjson202377feDecodePLANEXABackendModels4(in, &v28)
					out.Tasks = append(out.Tasks, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels3(out *jwriter.Writer, in List) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idl\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdL))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Uint(uint(in.Position))
	}
	{
		const prefix string = ",\"idb\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdB))
	}
	{
		const prefix string = ",\"Tasks\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Tasks {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels4(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson202377feDecodePLANEXABackendModels2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idu":
			out.IdU = uint(in.Uint())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "img_avatar":
			out.ImgAvatar = string(in.String())
		case "Boards":
			if in.IsNull() {
				in.Skip()
				out.Boards = nil
			} else {
				in.Delim('[')
				if out.Boards == nil {
					if !in.IsDelim(']') {
						out.Boards = make([]Board, 0, 0)
					} else {
						out.Boards = []Board{}
					}
				} else {
					out.Boards = (out.Boards)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Board
					(v31).UnmarshalEasyJSON(in)
					out.Boards = append(out.Boards, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]Comment, 0, 0)
					} else {
						out.Comments = []Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Comment
					easyjson202377feDecodePLANEXABackendModels6(in, &v32)
					out.Comments = append(out.Comments, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson202377feEncodePLANEXABackendModels2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idu\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdU))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"img_avatar\":"
		out.RawString(prefix)
		out.String(string(in.ImgAvatar))
	}
	{
		const prefix string = ",\"Boards\":"
		out.RawString(prefix)
		if in.Boards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Boards {
				if v33 > 0 {
					out.RawByte(',')
				}
				(v34).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Comments {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjson202377feEncodePLANEXABackendModels6(out, v36)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
