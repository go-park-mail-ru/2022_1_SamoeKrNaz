// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson79a0a577DecodePLANEXABackendModels(in *jlexer.Lexer, out *Tasks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Tasks, 0, 0)
			} else {
				*out = Tasks{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Task
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a0a577EncodePLANEXABackendModels(out *jwriter.Writer, in Tasks) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Tasks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson79a0a577EncodePLANEXABackendModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tasks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson79a0a577EncodePLANEXABackendModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tasks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson79a0a577DecodePLANEXABackendModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tasks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson79a0a577DecodePLANEXABackendModels(l, v)
}
func easyjson79a0a577DecodePLANEXABackendModels1(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idt":
			out.IdT = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "position":
			out.Position = uint(in.Uint())
		case "dateCreated":
			out.DateCreated = string(in.String())
		case "idl":
			out.IdL = uint(in.Uint())
		case "IdB":
			out.IdB = uint(in.Uint())
		case "DateToOrder":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateToOrder).UnmarshalJSON(data))
			}
		case "deadline":
			out.Deadline = string(in.String())
		case "IdU":
			out.IdU = uint(in.Uint())
		case "is_ready":
			out.IsReady = bool(in.Bool())
		case "is_important":
			out.IsImportant = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "icon_pattern":
			out.IconPattern = uint(in.Uint())
		case "checkList":
			if in.IsNull() {
				in.Skip()
				out.CheckLists = nil
			} else {
				in.Delim('[')
				if out.CheckLists == nil {
					if !in.IsDelim(']') {
						out.CheckLists = make([]CheckList, 0, 1)
					} else {
						out.CheckLists = []CheckList{}
					}
				} else {
					out.CheckLists = (out.CheckLists)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CheckList
					(v4).UnmarshalEasyJSON(in)
					out.CheckLists = append(out.CheckLists, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "comment":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]Comment, 0, 0)
					} else {
						out.Comments = []Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Comment
					(v5).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "append_users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 0)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v6 User
					(v6).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 1)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Attachment
					(v7).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a0a577EncodePLANEXABackendModels1(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idt\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.IdT))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Uint(uint(in.Position))
	}
	{
		const prefix string = ",\"dateCreated\":"
		out.RawString(prefix)
		out.String(string(in.DateCreated))
	}
	{
		const prefix string = ",\"idl\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdL))
	}
	{
		const prefix string = ",\"IdB\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdB))
	}
	{
		const prefix string = ",\"DateToOrder\":"
		out.RawString(prefix)
		out.Raw((in.DateToOrder).MarshalJSON())
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		out.String(string(in.Deadline))
	}
	{
		const prefix string = ",\"IdU\":"
		out.RawString(prefix)
		out.Uint(uint(in.IdU))
	}
	{
		const prefix string = ",\"is_ready\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReady))
	}
	{
		const prefix string = ",\"is_important\":"
		out.RawString(prefix)
		out.String(string(in.IsImportant))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"icon_pattern\":"
		out.RawString(prefix)
		out.Uint(uint(in.IconPattern))
	}
	{
		const prefix string = ",\"checkList\":"
		out.RawString(prefix)
		if in.CheckLists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.CheckLists {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Comments {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"append_users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Users {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Attachments {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Task) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson79a0a577EncodePLANEXABackendModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Task) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson79a0a577EncodePLANEXABackendModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Task) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson79a0a577DecodePLANEXABackendModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Task) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson79a0a577DecodePLANEXABackendModels1(l, v)
}
