// Code generated by MockGen. DO NOT EDIT.
// Source: task_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	models "PLANEXA_backend/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskUseCase is a mock of TaskUseCase interface.
type MockTaskUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUseCaseMockRecorder
}

// MockTaskUseCaseMockRecorder is the mock recorder for MockTaskUseCase.
type MockTaskUseCaseMockRecorder struct {
	mock *MockTaskUseCase
}

// NewMockTaskUseCase creates a new mock instance.
func NewMockTaskUseCase(ctrl *gomock.Controller) *MockTaskUseCase {
	mock := &MockTaskUseCase{ctrl: ctrl}
	mock.recorder = &MockTaskUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUseCase) EXPECT() *MockTaskUseCaseMockRecorder {
	return m.recorder
}

// AppendUserToTask mocks base method.
func (m *MockTaskUseCase) AppendUserToTask(userId, taskId uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendUserToTask", userId, taskId)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendUserToTask indicates an expected call of AppendUserToTask.
func (mr *MockTaskUseCaseMockRecorder) AppendUserToTask(userId, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUserToTask", reflect.TypeOf((*MockTaskUseCase)(nil).AppendUserToTask), userId, taskId)
}

// CreateTask mocks base method.
func (m *MockTaskUseCase) CreateTask(task models.Task, idB, idL, idU uint) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task, idB, idL, idU)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskUseCaseMockRecorder) CreateTask(task, idB, idL, idU interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskUseCase)(nil).CreateTask), task, idB, idL, idU)
}

// DeleteTask mocks base method.
func (m *MockTaskUseCase) DeleteTask(taskId, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskUseCaseMockRecorder) DeleteTask(taskId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskUseCase)(nil).DeleteTask), taskId, userId)
}

// GetImportantTask mocks base method.
func (m *MockTaskUseCase) GetImportantTask(userId uint) (*[]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportantTask", userId)
	ret0, _ := ret[0].(*[]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportantTask indicates an expected call of GetImportantTask.
func (mr *MockTaskUseCaseMockRecorder) GetImportantTask(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportantTask", reflect.TypeOf((*MockTaskUseCase)(nil).GetImportantTask), userId)
}

// GetSingleTask mocks base method.
func (m *MockTaskUseCase) GetSingleTask(taskId, userId uint) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleTask", taskId, userId)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleTask indicates an expected call of GetSingleTask.
func (mr *MockTaskUseCaseMockRecorder) GetSingleTask(taskId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleTask", reflect.TypeOf((*MockTaskUseCase)(nil).GetSingleTask), taskId, userId)
}

// GetTasks mocks base method.
func (m *MockTaskUseCase) GetTasks(listId, userId uint) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", listId, userId)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTaskUseCaseMockRecorder) GetTasks(listId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTaskUseCase)(nil).GetTasks), listId, userId)
}

// RefactorTask mocks base method.
func (m *MockTaskUseCase) RefactorTask(task models.Task, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefactorTask", task, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefactorTask indicates an expected call of RefactorTask.
func (mr *MockTaskUseCaseMockRecorder) RefactorTask(task, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefactorTask", reflect.TypeOf((*MockTaskUseCase)(nil).RefactorTask), task, userId)
}
