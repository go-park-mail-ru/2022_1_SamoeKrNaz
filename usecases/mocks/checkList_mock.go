// Code generated by MockGen. DO NOT EDIT.
// Source: checkList_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	models "PLANEXA_backend/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckListUseCase is a mock of CheckListUseCase interface.
type MockCheckListUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCheckListUseCaseMockRecorder
}

// MockCheckListUseCaseMockRecorder is the mock recorder for MockCheckListUseCase.
type MockCheckListUseCaseMockRecorder struct {
	mock *MockCheckListUseCase
}

// NewMockCheckListUseCase creates a new mock instance.
func NewMockCheckListUseCase(ctrl *gomock.Controller) *MockCheckListUseCase {
	mock := &MockCheckListUseCase{ctrl: ctrl}
	mock.recorder = &MockCheckListUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckListUseCase) EXPECT() *MockCheckListUseCaseMockRecorder {
	return m.recorder
}

// CreateCheckList mocks base method.
func (m *MockCheckListUseCase) CreateCheckList(checkList *models.CheckList, IdT, userId uint) (*models.CheckList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckList", checkList, IdT, userId)
	ret0, _ := ret[0].(*models.CheckList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckList indicates an expected call of CreateCheckList.
func (mr *MockCheckListUseCaseMockRecorder) CreateCheckList(checkList, IdT, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).CreateCheckList), checkList, IdT, userId)
}

// DeleteCheckList mocks base method.
func (m *MockCheckListUseCase) DeleteCheckList(IdCl, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCheckList", IdCl, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCheckList indicates an expected call of DeleteCheckList.
func (mr *MockCheckListUseCaseMockRecorder) DeleteCheckList(IdCl, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).DeleteCheckList), IdCl, userId)
}

// GetCheckLists mocks base method.
func (m *MockCheckListUseCase) GetCheckLists(userId, IdT uint) (*[]models.CheckList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckLists", userId, IdT)
	ret0, _ := ret[0].(*[]models.CheckList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckLists indicates an expected call of GetCheckLists.
func (mr *MockCheckListUseCaseMockRecorder) GetCheckLists(userId, IdT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckLists", reflect.TypeOf((*MockCheckListUseCase)(nil).GetCheckLists), userId, IdT)
}

// GetSingleCheckList mocks base method.
func (m *MockCheckListUseCase) GetSingleCheckList(userId, IdCl uint) (*models.CheckList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleCheckList", userId, IdCl)
	ret0, _ := ret[0].(*models.CheckList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleCheckList indicates an expected call of GetSingleCheckList.
func (mr *MockCheckListUseCaseMockRecorder) GetSingleCheckList(userId, IdCl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).GetSingleCheckList), userId, IdCl)
}

// RefactorCheckList mocks base method.
func (m *MockCheckListUseCase) RefactorCheckList(checkList *models.CheckList, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefactorCheckList", checkList, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefactorCheckList indicates an expected call of RefactorCheckList.
func (mr *MockCheckListUseCaseMockRecorder) RefactorCheckList(checkList, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefactorCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).RefactorCheckList), checkList, userId)
}
