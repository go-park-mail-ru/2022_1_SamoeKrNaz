// Code generated by MockGen. DO NOT EDIT.
// Source: checkListItem_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	models "PLANEXA_backend/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckListItemUseCase is a mock of CheckListItemUseCase interface.
type MockCheckListItemUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCheckListItemUseCaseMockRecorder
}

// MockCheckListItemUseCaseMockRecorder is the mock recorder for MockCheckListItemUseCase.
type MockCheckListItemUseCaseMockRecorder struct {
	mock *MockCheckListItemUseCase
}

// NewMockCheckListItemUseCase creates a new mock instance.
func NewMockCheckListItemUseCase(ctrl *gomock.Controller) *MockCheckListItemUseCase {
	mock := &MockCheckListItemUseCase{ctrl: ctrl}
	mock.recorder = &MockCheckListItemUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckListItemUseCase) EXPECT() *MockCheckListItemUseCaseMockRecorder {
	return m.recorder
}

// CreateCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) CreateCheckListItem(checkListItem *models.CheckListItem, IdCl, userId uint) (*models.CheckListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckListItem", checkListItem, IdCl, userId)
	ret0, _ := ret[0].(*models.CheckListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckListItem indicates an expected call of CreateCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) CreateCheckListItem(checkListItem, IdCl, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).CreateCheckListItem), checkListItem, IdCl, userId)
}

// DeleteCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) DeleteCheckListItem(IdClIt, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCheckListItem", IdClIt, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCheckListItem indicates an expected call of DeleteCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) DeleteCheckListItem(IdClIt, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).DeleteCheckListItem), IdClIt, userId)
}

// GetCheckListItems mocks base method.
func (m *MockCheckListItemUseCase) GetCheckListItems(userId, IdCl uint) (*[]models.CheckListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckListItems", userId, IdCl)
	ret0, _ := ret[0].(*[]models.CheckListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckListItems indicates an expected call of GetCheckListItems.
func (mr *MockCheckListItemUseCaseMockRecorder) GetCheckListItems(userId, IdCl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckListItems", reflect.TypeOf((*MockCheckListItemUseCase)(nil).GetCheckListItems), userId, IdCl)
}

// GetSingleCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) GetSingleCheckListItem(IdClIt, userId uint) (*models.CheckListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleCheckListItem", IdClIt, userId)
	ret0, _ := ret[0].(*models.CheckListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleCheckListItem indicates an expected call of GetSingleCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) GetSingleCheckListItem(IdClIt, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).GetSingleCheckListItem), IdClIt, userId)
}

// RefactorCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) RefactorCheckListItem(checkListItem *models.CheckListItem, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefactorCheckListItem", checkListItem, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefactorCheckListItem indicates an expected call of RefactorCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) RefactorCheckListItem(checkListItem, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefactorCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).RefactorCheckListItem), checkListItem, userId)
}
