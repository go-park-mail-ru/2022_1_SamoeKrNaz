// Code generated by MockGen. DO NOT EDIT.
// Source: user_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	models "PLANEXA_backend/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// GetInfoById mocks base method.
func (m *MockUserUseCase) GetInfoById(userId uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoById", userId)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoById indicates an expected call of GetInfoById.
func (mr *MockUserUseCaseMockRecorder) GetInfoById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoById", reflect.TypeOf((*MockUserUseCase)(nil).GetInfoById), userId)
}

// GetUsersLike mocks base method.
func (m *MockUserUseCase) GetUsersLike(username string) (*[]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersLike", username)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLike indicates an expected call of GetUsersLike.
func (mr *MockUserUseCaseMockRecorder) GetUsersLike(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLike", reflect.TypeOf((*MockUserUseCase)(nil).GetUsersLike), username)
}

// Login mocks base method.
func (m *MockUserUseCase) Login(user models.User) (uint, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserUseCaseMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUseCase)(nil).Login), user)
}

// Logout mocks base method.
func (m *MockUserUseCase) Logout(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUserUseCaseMockRecorder) Logout(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserUseCase)(nil).Logout), token)
}

// RefactorProfile mocks base method.
func (m *MockUserUseCase) RefactorProfile(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefactorProfile", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefactorProfile indicates an expected call of RefactorProfile.
func (mr *MockUserUseCaseMockRecorder) RefactorProfile(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefactorProfile", reflect.TypeOf((*MockUserUseCase)(nil).RefactorProfile), user)
}

// Register mocks base method.
func (m *MockUserUseCase) Register(user models.User) (uint, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register.
func (mr *MockUserUseCaseMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUseCase)(nil).Register), user)
}

// SaveAvatar mocks base method.
func (m *MockUserUseCase) SaveAvatar(arg0 *models.User, arg1 *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatar", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAvatar indicates an expected call of SaveAvatar.
func (mr *MockUserUseCaseMockRecorder) SaveAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatar", reflect.TypeOf((*MockUserUseCase)(nil).SaveAvatar), arg0, arg1)
}
