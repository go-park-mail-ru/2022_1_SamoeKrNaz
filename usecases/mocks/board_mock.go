// Code generated by MockGen. DO NOT EDIT.
// Source: board_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	models "PLANEXA_backend/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBoardUseCase is a mock of BoardUseCase interface.
type MockBoardUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBoardUseCaseMockRecorder
}

// MockBoardUseCaseMockRecorder is the mock recorder for MockBoardUseCase.
type MockBoardUseCaseMockRecorder struct {
	mock *MockBoardUseCase
}

// NewMockBoardUseCase creates a new mock instance.
func NewMockBoardUseCase(ctrl *gomock.Controller) *MockBoardUseCase {
	mock := &MockBoardUseCase{ctrl: ctrl}
	mock.recorder = &MockBoardUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoardUseCase) EXPECT() *MockBoardUseCaseMockRecorder {
	return m.recorder
}

// CreateBoard mocks base method.
func (m *MockBoardUseCase) CreateBoard(userId uint, board models.Board) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", userId, board)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard.
func (mr *MockBoardUseCaseMockRecorder) CreateBoard(userId, board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockBoardUseCase)(nil).CreateBoard), userId, board)
}

// DeleteBoard mocks base method.
func (m *MockBoardUseCase) DeleteBoard(boardId, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoard", boardId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoard indicates an expected call of DeleteBoard.
func (mr *MockBoardUseCaseMockRecorder) DeleteBoard(boardId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockBoardUseCase)(nil).DeleteBoard), boardId, userId)
}

// GetBoard mocks base method.
func (m *MockBoardUseCase) GetBoard(boardId, userId uint) (models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoard", boardId, userId)
	ret0, _ := ret[0].(models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard.
func (mr *MockBoardUseCaseMockRecorder) GetBoard(boardId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockBoardUseCase)(nil).GetBoard), boardId, userId)
}

// GetBoards mocks base method.
func (m *MockBoardUseCase) GetBoards(userId uint) ([]models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoards", userId)
	ret0, _ := ret[0].([]models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoards indicates an expected call of GetBoards.
func (mr *MockBoardUseCaseMockRecorder) GetBoards(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoards", reflect.TypeOf((*MockBoardUseCase)(nil).GetBoards), userId)
}

// GetSingleBoard mocks base method.
func (m *MockBoardUseCase) GetSingleBoard(boardId, userId uint) (models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleBoard", boardId, userId)
	ret0, _ := ret[0].(models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleBoard indicates an expected call of GetSingleBoard.
func (mr *MockBoardUseCaseMockRecorder) GetSingleBoard(boardId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleBoard", reflect.TypeOf((*MockBoardUseCase)(nil).GetSingleBoard), boardId, userId)
}

// RefactorBoard mocks base method.
func (m *MockBoardUseCase) RefactorBoard(userId uint, board models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefactorBoard", userId, board)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefactorBoard indicates an expected call of RefactorBoard.
func (mr *MockBoardUseCaseMockRecorder) RefactorBoard(userId, board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefactorBoard", reflect.TypeOf((*MockBoardUseCase)(nil).RefactorBoard), userId, board)
}

// SaveImage mocks base method.
func (m *MockBoardUseCase) SaveImage(userId uint, board *models.Board, header *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", userId, board, header)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockBoardUseCaseMockRecorder) SaveImage(userId, board, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockBoardUseCase)(nil).SaveImage), userId, board, header)
}
