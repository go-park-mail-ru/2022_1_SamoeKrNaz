// Code generated by MockGen. DO NOT EDIT.
// Source: user_grpc.pb.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	handler "PLANEXA_backend/user_microservice/server_user/handler"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// AddUserToBoard mocks base method.
func (m *MockUserServiceClient) AddUserToBoard(ctx context.Context, in *handler.Ids, opts ...grpc.CallOption) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUserToBoard", varargs...)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToBoard indicates an expected call of AddUserToBoard.
func (mr *MockUserServiceClientMockRecorder) AddUserToBoard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToBoard", reflect.TypeOf((*MockUserServiceClient)(nil).AddUserToBoard), varargs...)
}

// Create mocks base method.
func (m *MockUserServiceClient) Create(ctx context.Context, in *handler.User, opts ...grpc.CallOption) (*handler.IdUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*handler.IdUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServiceClient)(nil).Create), varargs...)
}

// GetUserById mocks base method.
func (m *MockUserServiceClient) GetUserById(ctx context.Context, in *handler.IdUser, opts ...grpc.CallOption) (*handler.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserById", varargs...)
	ret0, _ := ret[0].(*handler.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceClientMockRecorder) GetUserById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserById), varargs...)
}

// GetUserByLogin mocks base method.
func (m *MockUserServiceClient) GetUserByLogin(ctx context.Context, in *handler.Username, opts ...grpc.CallOption) (*handler.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByLogin", varargs...)
	ret0, _ := ret[0].(*handler.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserServiceClientMockRecorder) GetUserByLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByLogin), varargs...)
}

// GetUsersLike mocks base method.
func (m *MockUserServiceClient) GetUsersLike(ctx context.Context, in *handler.Username, opts ...grpc.CallOption) (*handler.Users, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersLike", varargs...)
	ret0, _ := ret[0].(*handler.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLike indicates an expected call of GetUsersLike.
func (mr *MockUserServiceClientMockRecorder) GetUsersLike(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLike", reflect.TypeOf((*MockUserServiceClient)(nil).GetUsersLike), varargs...)
}

// IsAbleToLogin mocks base method.
func (m *MockUserServiceClient) IsAbleToLogin(ctx context.Context, in *handler.CheckLog, opts ...grpc.CallOption) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAbleToLogin", varargs...)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAbleToLogin indicates an expected call of IsAbleToLogin.
func (mr *MockUserServiceClientMockRecorder) IsAbleToLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAbleToLogin", reflect.TypeOf((*MockUserServiceClient)(nil).IsAbleToLogin), varargs...)
}

// IsExist mocks base method.
func (m *MockUserServiceClient) IsExist(ctx context.Context, in *handler.Username, opts ...grpc.CallOption) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsExist", varargs...)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockUserServiceClientMockRecorder) IsExist(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockUserServiceClient)(nil).IsExist), varargs...)
}

// Update mocks base method.
func (m *MockUserServiceClient) Update(ctx context.Context, in *handler.User, opts ...grpc.CallOption) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserServiceClient)(nil).Update), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// AddUserToBoard mocks base method.
func (m *MockUserServiceServer) AddUserToBoard(arg0 context.Context, arg1 *handler.Ids) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToBoard", arg0, arg1)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToBoard indicates an expected call of AddUserToBoard.
func (mr *MockUserServiceServerMockRecorder) AddUserToBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToBoard", reflect.TypeOf((*MockUserServiceServer)(nil).AddUserToBoard), arg0, arg1)
}

// Create mocks base method.
func (m *MockUserServiceServer) Create(arg0 context.Context, arg1 *handler.User) (*handler.IdUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*handler.IdUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServiceServer)(nil).Create), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockUserServiceServer) GetUserById(arg0 context.Context, arg1 *handler.IdUser) (*handler.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(*handler.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceServerMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserById), arg0, arg1)
}

// GetUserByLogin mocks base method.
func (m *MockUserServiceServer) GetUserByLogin(arg0 context.Context, arg1 *handler.Username) (*handler.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(*handler.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserServiceServerMockRecorder) GetUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByLogin), arg0, arg1)
}

// GetUsersLike mocks base method.
func (m *MockUserServiceServer) GetUsersLike(arg0 context.Context, arg1 *handler.Username) (*handler.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersLike", arg0, arg1)
	ret0, _ := ret[0].(*handler.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLike indicates an expected call of GetUsersLike.
func (mr *MockUserServiceServerMockRecorder) GetUsersLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLike", reflect.TypeOf((*MockUserServiceServer)(nil).GetUsersLike), arg0, arg1)
}

// IsAbleToLogin mocks base method.
func (m *MockUserServiceServer) IsAbleToLogin(arg0 context.Context, arg1 *handler.CheckLog) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAbleToLogin", arg0, arg1)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAbleToLogin indicates an expected call of IsAbleToLogin.
func (mr *MockUserServiceServerMockRecorder) IsAbleToLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAbleToLogin", reflect.TypeOf((*MockUserServiceServer)(nil).IsAbleToLogin), arg0, arg1)
}

// IsExist mocks base method.
func (m *MockUserServiceServer) IsExist(arg0 context.Context, arg1 *handler.Username) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", arg0, arg1)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockUserServiceServerMockRecorder) IsExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockUserServiceServer)(nil).IsExist), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserServiceServer) Update(arg0 context.Context, arg1 *handler.User) (*handler.NothingSec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*handler.NothingSec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
